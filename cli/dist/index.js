#!/usr/bin/env node
import{Command as ge}from"commander";import{Command as oe}from"commander";import g from"chalk";var m={error(...e){console.log(g.red(...e))},warn(...e){console.log(g.yellow(...e))},info(...e){console.log(g.cyan(...e))},success(...e){console.log(g.green(...e))},break(){console.log("")}};import{z as k}from"zod";import{z as p}from"zod";import Y from"fs/promises";var V=p.object({path:p.object({utils:p.string({message:"utils path is missing"}),components:p.string({message:"components path is missing"})},{message:"`path` config is missing "}),using:p.enum(["vite","cra","next"])});async function d(){let e=process.cwd(),t=await Y.readFile(`${e}/components.json`,"utf-8"),o=JSON.parse(t),n=V.safeParse(o);if(!n.success)throw new Error("Invalid configuration file");return n.data}import ne from"prompts";function C(e,t,o){return e.split(t).map(s=>`${s.split("")[0].toUpperCase()}${s.slice(1)}`).join(o||"")}import q from"ora";import B from"path";import b from"fs/promises";async function v(e){try{return await b.stat(e),!0}catch{return!1}}async function F({path:e,file:t,name:o,replace:n}){let s=`${e}/${o}`;return await v(s)&&!n?!1:(await b.writeFile(s,t),!0)}function R(e,t){return e.replace("@/components/ui",`${t.components.replace("/src","@")}`).replace("@/utils/lib",`${t.utils.replace("/src","@")}`)}async function I(e,t,o){let n=q(`Writing ${e.name}...`).start(),s=C(e.name,"-")+".tsx";await F({path:B.resolve(process.cwd(),"."+t.path.components),name:s,file:R(e.content,t.path),replace:o?.replace})?n.succeed(`Successfuly inserted ${C(e.name,"-"," ")}.`):n.stop()}import se from"chalk";import L from"ora";import{execa as O}from"execa";import H from"path";import j from"fs/promises";var K="import 'react-loading-skeleton/dist/skeleton.css'",$={"react-loading-skeleton":async e=>{if(e.using==="vite"){let t=H.resolve(process.cwd(),"./src/main.tsx"),o=await j.readFile(t,"utf-8");o.includes("react-loading-skeleton/dist/skeleton.css")||await j.writeFile(t,`${K}
${o}`)}}};async function x(e,t){if(e in $){let o=$[e];await o(t)}}import Q from"fs/promises";import X from"path";async function A(){let e=X.resolve(process.cwd(),"package.json"),t=JSON.parse(await Q.readFile(e,"utf-8"));return[...Object.keys(t.dependencies||{}),...Object.keys(t.devDependencies||{})]}async function _({dependencies:e,devDependencies:t}){let o=await A(),n=e.filter(i=>!o.includes(i)),s=t.filter(i=>!o.includes(i)),r=await d();n.forEach(i=>x(i,r)),s.forEach(i=>x(i,r)),s.length>0&&await O("npm",["install","-D",...s],{cwd:process.cwd()}),n.length>0&&await O("npm",["install",...n],{cwd:process.cwd()})}import{z as S}from"zod";import Z from"axios";var z="https://layers-ui-registry.vercel.app/";var u=Z.create({baseURL:z});var ee=S.object({data:S.array(S.string())});async function U(){let e=await u.get("/names");return ee.parse(e?.data).data}import{z as c}from"zod";var te=c.object({components:c.array(c.object({name:c.string(),content:c.string()})),dependencies:c.array(c.string()),devDependencies:c.array(c.string())});async function D(e){let t=await u.get(`?components=${e.join(",")}`);return te.parse(t?.data)}var ie=k.object({components:k.array(k.string())}),W=new oe().name("add").description("adds component to your project").argument("[inputComponents...]","components to add").action(re);async function re(e){try{let t=await d(),o=ie.parse({components:e}),n=await U(),s=[],r=[];o.components.forEach(a=>{n.includes(a)?s.push(a):r.push(a)}),r.length>0&&console.log(se.yellow("Ignoring Invalid Component Names:"),r.join(", "));let i=s;if(o.components.length<=0){let{components:a}=await ne({instructions:!1,type:"multiselect",hint:"Press [space] to select, [a] to select all, [enter] to submit",name:"components",message:"Select components",choices:n.map(T=>({title:T,value:T}))});i=a}if(i.length<=0){m.info("No valid components selected, exiting.");return}let w=L("Retrieving components from registry... "),{components:y,dependencies:E,devDependencies:N}=await D(i);if(w.stop(),await Promise.all(y.map(a=>I(a,t,{replace:!0}))),E.length>0||N.length>0){let a=L("Installing dependencies...").start();await _({dependencies:E,devDependencies:N}),a.succeed("Completed dependency installation")}}catch(t){m.error(t.message)}}import{Command as ae}from"commander";import G from"prompts";import{z as f}from"zod";import l from"fs/promises";import h from"path";import J from"chalk";var P=`import clsx, { ClassValue } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...classNames: ClassValue[]) {
  return twMerge(clsx(classNames));
}
`;var ce="/src/components/ui",me="/src/utils",le="lib",M=new ae().name("init").description("intialize your project to accept layer components").action(fe),pe=f.object({componentPath:f.string(),utilsPath:f.string(),utilsName:f.string(),buildTool:f.enum(["vite","cra","next"])});async function fe(){try{let e=await G([{type:"text",name:"componentPath",message:"Component install path?",initial:ce},{type:"text",message:"Utils file install path?",name:"utilsPath",initial:me},{type:"text",message:"Utils file name?",name:"utilsName",initial:le},{type:"select",message:"Which build tool are you using?",name:"buildTool",initial:0,choices:[{title:"Vite",value:"vite"}]}]),t=pe.parse(e),o=process.cwd(),n={path:{components:t.componentPath,utils:`${t.utilsPath}/${t.utilsName}`},using:t.buildTool},s=JSON.stringify(n,null,"	");await l.writeFile(h.resolve(o,"./components.json"),s);let r=h.resolve(o,`.${n.path.components}`);l.stat(r)||l.mkdir(r);let i=h.resolve(o,`.${n.path.utils}.ts`),w=h.resolve(o,`.${t.utilsPath}`);if(await v(i)){let{proceed:y}=await G({name:"proceed",type:"toggle",message:`The file named ${J.yellow(t.utilsName+".tsx")} at ${J.yellow(t.utilsPath)} already exists, would like to replace it?`,initial:!0,active:"yes",inactive:"no"});y&&await l.writeFile(i,P)}else l.mkdir(w,{recursive:!0}),await l.writeFile(i,P);m.success("Successfuly initialized project.")}catch(e){m.error(e.message)}}import{config as de}from"dotenv";de({path:"./.env"});async function ue(){try{let e=new ge().name("layers-ui").description("Adds pre-made components to projects").version("1.0.0");e.addCommand(W).addCommand(M),e.parse(process.argv)}catch(e){console.log(e.message)}}async function he(){}process.argv[2]==="test"?he():ue();
//# sourceMappingURL=index.js.map