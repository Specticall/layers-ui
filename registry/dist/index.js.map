{"version":3,"sources":["../src/index.ts","../src/app.ts","../src/routes/componentRouter.ts","../src/utils/http/AppError.ts","../src/controllers/ErrorController.ts","../src/utils/http/statusCodes.ts","../src/utils/utils.ts","../src/components/dependencyList.ts","../src/components/index.ts","../src/components/data/Button.ts","../src/components/data/DashboardLayout.ts","../src/components/data/Dialog.ts","../src/components/data/Dropdown.ts","../src/components/data/Input.ts","../src/components/data/LoadingSpinner.ts","../src/components/data/Popover.ts","../src/components/data/Table.ts","../src/components/data/Toast.ts","../src/controllers/ComponentController.ts","../src/routes/index.ts","../src/config/env.ts"],"sourcesContent":["/**\r\n * Configure enviroment variables\r\n */\r\nimport \"dotenv/config\";\r\n\r\n/////////////////////////////\r\n\r\nimport chalk from \"chalk\";\r\nimport app from \"./app\";\r\nimport { PORT } from \"./config/env\";\r\n\r\n/**\r\n * Start the server instance\r\n */\r\napp.listen(PORT, () => {\r\n  console.log(`${chalk.blue(\"[SERVER]\")} Running on Port ${PORT}`);\r\n});\r\n","import express from \"express\";\r\nimport cors from \"cors\";\r\nimport router from \"./routes\";\r\nimport { AppError } from \"./utils/http/AppError\";\r\nimport { STATUS } from \"./utils/http/statusCodes\";\r\nimport { ErrorController } from \"./controllers\";\r\n\r\nconst app = express();\r\n\r\n/**\r\n * Enable Cross-Origin Resource Sharing (CORS) for all routes\r\n * This allows your API to be accessed from different domains\r\n */\r\napp.use(cors());\r\n\r\n/**\r\n * Middleware to parse incoming JSON requests\r\n * This allows you to access the request body as `request.body`\r\n */\r\napp.use(express.json());\r\n\r\n/**\r\n * Register all application routes\r\n * This includes all the endpoints defined in the router\r\n */\r\napp.use(router);\r\n\r\n/**\r\n * Handle requests to undefined routes\r\n * If a route is not found, throw an AppError with a 404 status code\r\n */\r\napp.use(\"*\", (_, __, next) => {\r\n  next(new AppError(\"Route not found\", STATUS.NOT_FOUND));\r\n});\r\n\r\n/**\r\n * Global error handling middleware\r\n * This will catch all errors and send an appropriate response to the client\r\n */\r\napp.use(ErrorController);\r\n\r\nexport default app;\r\n","import { Router } from \"express\";\nimport { ComponentController } from \"../controllers\";\n\nconst componentRouter = Router();\n\n/**\n * Insert your routes here\n * @example exampleRouter.get(\"/\", getExample)\n */\ncomponentRouter.get(\"/\", ComponentController.getComponent);\ncomponentRouter.get(\"/names\", ComponentController.getComponentNames);\n\nexport default componentRouter;\n","/**\r\n * Wrapper class over the error class to accomodate for API needs.\r\n * @example throw new AppError(\"Couldn't find user\", STATUS.NOT_FOUND)\r\n */\r\nexport class AppError extends Error {\r\n  statusCode: number;\r\n  status: \"fail\" | \"success\";\r\n  operational: boolean;\r\n\r\n  constructor(message: string, statusCode: number) {\r\n    super(message);\r\n\r\n    this.statusCode = statusCode;\r\n    this.status = statusCode.toString().startsWith(\"2\") ? \"success\" : \"fail\";\r\n    this.operational = true;\r\n\r\n    /**\r\n     *\r\n     * The code below is used to instanceof can be used with this class.\r\n     *\r\n     * The babel transpiler has issues when converting ES6 classes to older versions casing `instanceof` to not recognize their class. To handle we have to manually set the prototype of this class as `Error` (accessed through `AppError.prototype` which strangely works)\r\n     */\r\n    Object.setPrototypeOf(this, AppError.prototype);\r\n    Error.captureStackTrace(this, this.constructor);\r\n  }\r\n}\r\n","import { AppError } from \"../utils/http/AppError\";\r\nimport { ErrorRequestHandler } from \"express\";\r\n\r\nconst IS_PRODUCTION = process.env.ENVIROMENT === \"PROD\";\r\n\r\n/**\r\n * Error Handling middleware\r\n */\r\nconst errorHandler: ErrorRequestHandler = async (\r\n  error: AppError | Error,\r\n  _,\r\n  response,\r\n  __\r\n) => {\r\n  if (error instanceof AppError) {\r\n    response.status(error.statusCode).send({\r\n      status: error.status,\r\n      statusCode: error.statusCode,\r\n      message: error.message,\r\n      ...(IS_PRODUCTION ? {} : { stack: error.stack }),\r\n    });\r\n\r\n    return;\r\n  }\r\n\r\n  response.status(500).send({\r\n    status: \"fail\",\r\n    statusCode: 500,\r\n    message: \"Oops, Something went very wrong!\",\r\n    ...(IS_PRODUCTION ? {} : { stack: error.stack }),\r\n  });\r\n};\r\n\r\nexport default errorHandler;\r\n","export const STATUS = {\r\n  OK: 200,\r\n  CREATED: 201,\r\n  BAD_REQUEST: 400,\r\n  UNAUTHORIZED: 401,\r\n  FORBIDDEN: 403,\r\n  NOT_FOUND: 404,\r\n  INTERNAL_SERVER_ERROR: 500,\r\n} as const;\r\n","export function kebabToPascalCase(input: string) {\r\n  return input\r\n    .split(\"-\")\r\n    .map((word) => word[0].toUpperCase() + word.slice(1))\r\n    .join(\"\");\r\n}\r\n","export const dependencyList = `[\n\t{\n\t\t\"name\": \"Button\",\n\t\t\"componentDependencies\": [\n\t\t\t\"loading-spinner\"\n\t\t],\n\t\t\"dependencies\": [],\n\t\t\"devDependencies\": [\n\t\t\t\"class-variance-authority\"\n\t\t]\n\t},\n\t{\n\t\t\"name\": \"DashboardLayout\",\n\t\t\"componentDependencies\": [\n\t\t\t\"table\"\n\t\t],\n\t\t\"dependencies\": [],\n\t\t\"devDependencies\": []\n\t},\n\t{\n\t\t\"name\": \"Dialog\",\n\t\t\"componentDependencies\": [],\n\t\t\"dependencies\": [],\n\t\t\"devDependencies\": []\n\t},\n\t{\n\t\t\"name\": \"Dropdown\",\n\t\t\"componentDependencies\": [\n\t\t\t\"popover\"\n\t\t],\n\t\t\"dependencies\": [\n\t\t\t\"react-loading-skeleton\"\n\t\t],\n\t\t\"devDependencies\": []\n\t},\n\t{\n\t\t\"name\": \"Input\",\n\t\t\"componentDependencies\": [],\n\t\t\"dependencies\": [\n\t\t\t\"react-loading-skeleton\"\n\t\t],\n\t\t\"devDependencies\": []\n\t},\n\t{\n\t\t\"name\": \"LoadingSpinner\",\n\t\t\"componentDependencies\": [],\n\t\t\"dependencies\": [],\n\t\t\"devDependencies\": []\n\t},\n\t{\n\t\t\"name\": \"Popover\",\n\t\t\"componentDependencies\": [],\n\t\t\"dependencies\": [],\n\t\t\"devDependencies\": []\n\t},\n\t{\n\t\t\"name\": \"Table\",\n\t\t\"componentDependencies\": [],\n\t\t\"dependencies\": [],\n\t\t\"devDependencies\": []\n\t},\n\t{\n\t\t\"name\": \"Toast\",\n\t\t\"componentDependencies\": [],\n\t\t\"dependencies\": [],\n\t\t\"devDependencies\": []\n\t}\n]`","export { default as Button } from \"./data/Button\";\nexport { default as DashboardLayout } from \"./data/DashboardLayout\";\nexport { default as Dialog } from \"./data/Dialog\";\nexport { default as Dropdown } from \"./data/Dropdown\";\nexport { default as Input } from \"./data/Input\";\nexport { default as LoadingSpinner } from \"./data/LoadingSpinner\";\nexport { default as Popover } from \"./data/Popover\";\nexport { default as Table } from \"./data/Table\";\nexport { default as Toast } from \"./data/Toast\";","const Button = String.raw`\r\nimport { cva, type VariantProps } from \"class-variance-authority\";\r\nimport { cn } from \"@/utils/lib\";\r\nimport { forwardRef, Ref } from \"react\";\r\nimport { LoadingSpinner } from \"@/components/ui/LoadingSpinner\";\r\n\r\nconst buttonVariants = cva(\r\n  \"flex items-center justify-center whitespace-nowrap rounded-sm text-sm transition-colors disabled:pointer-events-none px-6 py-3 cursor-pointer transition disabled:bg-slate-500 leading-[100%] items-center\",\r\n  {\r\n    variants: {\r\n      variant: {\r\n        primary: \"bg-black text-white hover:bg-slate-900\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: \"primary\",\r\n    },\r\n  }\r\n);\r\n\r\ntype ButtonProps = React.ButtonHTMLAttributes<HTMLButtonElement> &\r\n  VariantProps<typeof buttonVariants> & {\r\n    isLoading?: boolean;\r\n    to?: string;\r\n  };\r\n\r\nfunction Button(\r\n  { className, variant, isLoading, children, ...props }: ButtonProps,\r\n  ref: Ref<HTMLButtonElement>\r\n) {\r\n  return (\r\n    <button\r\n      className={cn(buttonVariants({ variant }), className)}\r\n      ref={ref}\r\n      disabled={props.disabled || isLoading}\r\n      onClick={(e) => {\r\n        if (props.onClick) props.onClick(e);\r\n      }}\r\n      {...props}\r\n    >\r\n      {children}\r\n      {isLoading && <LoadingSpinner className=\"stroke-white ml-2\" />}\r\n    </button>\r\n  );\r\n}\r\n\r\nButton.displayName = \"Button\";\r\n\r\nexport default forwardRef(Button);\r\n`;\n\nexport default Button","const DashboardLayout = String.raw`\r\nimport Table from \"@/components/ui/Table\";\r\n\r\nconst invoices = [\r\n  {\r\n    invoice: \"INV001\",\r\n    paymentStatus: \"Paid\",\r\n    totalAmount: \"$250.00\",\r\n    paymentMethod: \"Credit Card\",\r\n  },\r\n  {\r\n    invoice: \"INV002\",\r\n    paymentStatus: \"Pending\",\r\n    totalAmount: \"$150.00\",\r\n    paymentMethod: \"PayPal\",\r\n  },\r\n  {\r\n    invoice: \"INV003\",\r\n    paymentStatus: \"Unpaid\",\r\n    totalAmount: \"$350.00\",\r\n    paymentMethod: \"Bank Transfer\",\r\n  },\r\n  {\r\n    invoice: \"INV004\",\r\n    paymentStatus: \"Paid\",\r\n    totalAmount: \"$450.00\",\r\n    paymentMethod: \"Credit Card\",\r\n  },\r\n];\r\n\r\nexport default function DashboardLayout() {\r\n  return (\r\n    <div className=\"min-h-screen w-full bg-slate-200\">\r\n      <div className=\"min-h-screen grid grid-cols-[12.5rem_1fr]\">\r\n        <aside className=\"bg-white\">\r\n          <p>Sidebar</p>\r\n        </aside>\r\n        <main className=\"relative\">\r\n          <header className=\"py-4 bg-white px-4\">Top Bar</header>\r\n          <section className=\"overflow-auto absolute inset-0 px-4 mt-14 flex flex-col\">\r\n            <h1 className=\"mb-4 font-semibold text-2xl mt-4\">Dashboard</h1>\r\n            <div className=\"mb-6 grid grid-cols-3 gap-4 w-full min-w-[50rem]\">\r\n              <div className=\"px-4 py-4 rounded-md bg-white text-xl\">120</div>\r\n              <div className=\"px-4 py-4 rounded-md bg-white text-xl\">120</div>\r\n              <div className=\"px-4 py-4 rounded-md bg-white text-xl\">120</div>\r\n            </div>\r\n            <div className=\"bg-white rounded-md flex-1 min-w-[50rem]\">\r\n              <Table.Container>\r\n                <Table.Head sticky>\r\n                  <Table.Row>\r\n                    <Table.Cell>Invoice</Table.Cell>\r\n                    <Table.Cell>Payment Status</Table.Cell>\r\n                    <Table.Cell>Total Amount</Table.Cell>\r\n                    <Table.Cell>Payment Method</Table.Cell>\r\n                  </Table.Row>\r\n                </Table.Head>\r\n                <Table.Body>\r\n                  {invoices.map((data, i) => {\r\n                    return (\r\n                      <Table.Row key={i}>\r\n                        <Table.Cell>{data.invoice}</Table.Cell>\r\n                        <Table.Cell>{data.paymentStatus}</Table.Cell>\r\n                        <Table.Cell>{data.totalAmount}</Table.Cell>\r\n                        <Table.Cell>{data.paymentMethod}</Table.Cell>\r\n                      </Table.Row>\r\n                    );\r\n                  })}\r\n                </Table.Body>\r\n              </Table.Container>{\" \"}\r\n            </div>\r\n          </section>\r\n        </main>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n`;\n\nexport default DashboardLayout","const Dialog = String.raw`\r\nimport {\r\n  MouseEvent,\r\n  ReactElement,\r\n  ReactNode,\r\n  createContext,\r\n  useCallback,\r\n  useContext,\r\n  useRef,\r\n  useState,\r\n} from \"react\";\r\nimport { cn } from \"@/utils/lib\";\r\n\r\nconst ANIMATION_DURATION_MS = 200;\r\n\r\ntype DialogComponentOptions = {\r\n  collapseWhenClickOutside?: boolean;\r\n};\r\ntype DialogComponent = {\r\n  name: string;\r\n  component: ReactElement;\r\n  options?: DialogComponentOptions;\r\n};\r\n\r\ntype TDialogContextValues = {\r\n  open: (dialogName: string, context?: unknown) => void;\r\n  close: (options?: { persistBackground?: boolean }) => Promise<void>;\r\n  context: unknown;\r\n  isShowing: boolean;\r\n};\r\nconst DialogContext = createContext<TDialogContextValues | null>(null);\r\n\r\nexport type DialogComponents = DialogComponent[];\r\n/*\r\n * DialogProvider is a context provider that provides a function to display a dialog component.\r\n * The dialog component is displayed at the center of the screen and can be closed by clicking outside the dialog component.\r\n */\r\nexport function DialogProvider({\r\n  children,\r\n  components,\r\n}: {\r\n  children: ReactNode;\r\n  components: DialogComponent[];\r\n}) {\r\n  // Context data that we can pass into a dialog component.\r\n  // When the user selects a sepcific task, the details from that task if first passed into this context then to the dialog component itself.\r\n  const [contextData, setContextData] = useState<unknown>({});\r\n  const wrapperRef = useRef<null | HTMLDivElement>(null);\r\n\r\n  // The options that can be passed into a dialog component.\r\n  const [options, setOptions] = useState<DialogComponentOptions | undefined>();\r\n\r\n  // The dialog component that is currently being displayed. Dialog selection is uesd by passing a key (string) that we have defined in the \\`components\\` array.\r\n  const [isShowing, setIsShowing] = useState<{\r\n    name: string;\r\n    selectedComponent?: ReactElement;\r\n  }>({\r\n    name: \"\",\r\n  });\r\n\r\n  // Displays a dialog component by passing in the key (string) that we have defined in the \\`components\\` array.\r\n  const open = useCallback(\r\n    (dialogName: string, context?: unknown) => {\r\n      // 1. Find the dialog component that matches the key (string) that we have defined in the \\`components\\` array.\r\n      const selectedComponent = components.find(\r\n        (component) => component.name === dialogName\r\n      );\r\n\r\n      // 2. Throw an error if the user made an error by passing a dialog component string that does not exist.\r\n      if (!selectedComponent)\r\n        throw new Error(\r\n          \\`Dialog with the name of \\${dialogName} does not exist!\\`\r\n        );\r\n\r\n      // 3. If provided, set the context data and options that we have defined in the \\`components\\` array.\r\n      if (context) setContextData(context);\r\n      if (selectedComponent.options) setOptions(selectedComponent.options);\r\n\r\n      // 5. Set the dialog component that will be displayed.\r\n      setIsShowing((current) => {\r\n        return {\r\n          ...current,\r\n          name: dialogName,\r\n          selectedComponent: selectedComponent.component,\r\n        };\r\n      });\r\n    },\r\n    [components]\r\n  );\r\n\r\n  const close = () => {\r\n    return new Promise<void>((resolve) => {\r\n      // 1. Restore the initial state of the dialog component.\r\n      setIsShowing({\r\n        name: \"\",\r\n      });\r\n      setContextData({});\r\n      setOptions(undefined);\r\n\r\n      // 2. Resolve the promise after the animation duration has passed. This is primarily used to be able to asynchronously perform animations while waiting the for close animation to finish.\r\n      setTimeout(() => {\r\n        resolve();\r\n      }, ANIMATION_DURATION_MS);\r\n    });\r\n  };\r\n\r\n  // Close the dialog when the user clicks outside.\r\n  const handleClickOutside = (e: MouseEvent) => {\r\n    console.log(\"CLICKED\");\r\n    e.stopPropagation();\r\n\r\n    // Disable the click outside functionality (if requested). This means that the user now needs to use the <DialogCollapse/> component to close the dialog.\r\n    if (\r\n      options &&\r\n      // This makes it so that only if the user explicity state true or false will this guard clause work. Basically making this option true by default\r\n      typeof options.collapseWhenClickOutside === \"boolean\" &&\r\n      !options.collapseWhenClickOutside\r\n    )\r\n      return;\r\n\r\n    // Retrieve the dialog component. Since the dialog component is always the child of \\`wrapper\\` then we can use .children[0]. However, do know that because of this, we cannot use <Fragments/> when creating a dialog component.\r\n    const wrapper = wrapperRef.current?.children[0];\r\n\r\n    if (!wrapper) return;\r\n\r\n    // Checks if the user click outside the bounding rectagnle\r\n    const clickedOutside = !wrapper.contains(e.target as HTMLElement);\r\n\r\n    // If the user clicks outside, then close the dialog\r\n    if (clickedOutside) close();\r\n  };\r\n\r\n  return (\r\n    <DialogContext.Provider\r\n      value={{\r\n        open,\r\n        close,\r\n        context: contextData,\r\n        isShowing: Boolean(isShowing.selectedComponent),\r\n      }}\r\n    >\r\n      <div\r\n        className={cn(\r\n          \"fixed inset-0 z-[9999] opacity-0 invisible bg-black/50 transition-all duration-400 flex items-center justify-center\",\r\n          isShowing.selectedComponent && \"opacity-100 visible\"\r\n        )}\r\n      >\r\n        <div\r\n          className={cn(\r\n            \\`dialog-content invisible scale-90 transition-all opacity-0 z-20 grid place-items-center min-h-full absolute inset-0\\`,\r\n            isShowing.selectedComponent && \"opacity-100 visible scale-100\"\r\n          )}\r\n          onMouseDown={handleClickOutside}\r\n          ref={wrapperRef}\r\n        >\r\n          {isShowing.selectedComponent}\r\n        </div>\r\n      </div>\r\n\r\n      {children}\r\n    </DialogContext.Provider>\r\n  );\r\n}\r\n\r\ntype AssertDialogNames<\r\n  DialogContext,\r\n  Components extends readonly DialogComponent[]\r\n> = {\r\n  [ContextKey in keyof DialogContext]: ContextKey extends \"open\"\r\n    ? (dialogName: Components[number][\"name\"], context?: unknown) => void\r\n    : DialogContext[ContextKey];\r\n};\r\n\r\nexport function useDialogContext<ContextTypes = unknown>() {\r\n  const context = useContext(DialogContext);\r\n  if (!context)\r\n    throw new Error(\r\n      \"useDialog should be called inside the <DialogProvider/> component\"\r\n    );\r\n  return context.context as ContextTypes;\r\n}\r\n\r\nexport function useDialog<Components extends readonly DialogComponent[]>() {\r\n  const context = useContext(DialogContext);\r\n  if (!context)\r\n    throw new Error(\r\n      \"useDialog should be called inside the <DialogProvider/> component\"\r\n    );\r\n  return context as AssertDialogNames<TDialogContextValues, Components>;\r\n}\r\n`;\n\nexport default Dialog","const Dropdown = String.raw`\r\nimport {\r\n  ComponentProps,\r\n  forwardRef,\r\n  HTMLAttributes,\r\n  Ref,\r\n  useCallback,\r\n  useState,\r\n} from \"react\";\r\nimport { cn } from \"@/utils/lib\";\r\nimport Popover from \"@/components/ui/Popover\";\r\nimport Skeleton from \"react-loading-skeleton\";\r\n\r\ntype Props = {\r\n  /**\r\n   * Placeholder trigger content when no options is selected\r\n   */\r\n  placeholder: string;\r\n\r\n  /**\r\n   * List of options that will be displayed on the dropdown content, accepts string only\r\n   */\r\n  options: readonly string[];\r\n\r\n  /**\r\n   * Display error message and shows an indicator, useful for forms\r\n   */\r\n  errorMessage?: string;\r\n\r\n  /**\r\n   * Sends data about the open/close state of the component\r\n   */\r\n  onOpenChange?: (value: boolean) => void;\r\n\r\n  /**\r\n   * Allows parent component to control the open/close state of the component\r\n   */\r\n  open?: boolean;\r\n\r\n  /**\r\n   * Closes the dropdown when user selects an options\r\n   * WARNING : this prop will not work when \\`open\\` is used to control the component\r\n   */\r\n  closeOnSelect?: boolean;\r\n\r\n  /**\r\n   * Replaces the component with a loading skeleton\r\n   */\r\n  isLoading?: boolean;\r\n};\r\n\r\ntype ChangeCallback =\r\n  | {\r\n      /**\r\n       * Allows user to select multiple inputs\r\n       */\r\n      multiple: true;\r\n      /**\r\n       * Callback that sends a string[] when \\`multiple\\` is true and a string[] when it is false\r\n       */\r\n      onChange?: (values: string[]) => void;\r\n\r\n      /**\r\n       * Allows user to control the component from outside, value will depend of the \\`multiple\\` prop, string[] when true or string otherwise.\r\n       */\r\n      value?: string[];\r\n    }\r\n  | {\r\n      multiple?: false | undefined;\r\n      onChange?: (values: string) => void;\r\n      value?: string;\r\n    };\r\n\r\ntype DropdownProps = Props &\r\n  ChangeCallback &\r\n  Omit<ComponentProps<typeof Popover.Container>, \"onChange\"> &\r\n  Omit<HTMLAttributes<HTMLDivElement>, \"onChange\">;\r\n\r\nfunction Dropdown(\r\n  {\r\n    placeholder,\r\n    options,\r\n    multiple = false,\r\n    onChange = () => {},\r\n    errorMessage,\r\n    closeOnSelect = false,\r\n    isLoading,\r\n    value,\r\n    ...props\r\n  }: DropdownProps,\r\n  ref: Ref<HTMLDivElement>\r\n) {\r\n  /**\r\n   * Keeps track of the selected items\r\n   */\r\n  const [selected, setSelected] = useState<string[]>([]);\r\n\r\n  /**\r\n   * Keeps track of the component's open state\r\n   */\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  /**\r\n   * Retrieves the corresponding value when the component becomes controlled (\\`value\\` props is inserted)\r\n   */\r\n  const getSelected = useCallback(() => {\r\n    if (typeof value === \"undefined\") return selected;\r\n    if (multiple) return value as string[];\r\n    return [value] as string[];\r\n  }, [selected, value, multiple]);\r\n\r\n  /**\r\n   * Stores the logic for inserting / removing an item to the selected list\r\n   */\r\n  const handleSelect = useCallback(\r\n    (item: string) => () => {\r\n      let newValue = getSelected();\r\n\r\n      // Remove the item from the list of they already exist\r\n      if (getSelected().includes(item)) {\r\n        newValue = getSelected().filter((current) => item !== current);\r\n      } else {\r\n        // Appends an item on multiple mode, change the item on single mode.\r\n        newValue = multiple ? [item, ...getSelected()] : [item];\r\n      }\r\n\r\n      // The return value should be an array when the \\`multiple\\` prop is set to true\r\n      setSelected(newValue);\r\n      if (!onChange) return;\r\n      if (multiple) {\r\n        // [HELP NEEDED] : Are there better ways?\r\n        onChange(newValue as string[] & string);\r\n      } else {\r\n        // [HELP NEEDED] : Are there better ways?\r\n        onChange(newValue[0] as string[] & string);\r\n      }\r\n\r\n      // Closes the component when user selects a value (toggleable via props)\r\n      if (closeOnSelect) setIsOpen(false);\r\n    },\r\n    [closeOnSelect, multiple, onChange, getSelected]\r\n  );\r\n\r\n  /**\r\n   * Retrieves and formats the selected value in a presentable string format, used to display the contents of the dropdown trigger.\r\n   */\r\n  const getSelectedValue = useCallback(() => {\r\n    return getSelected().length > 1\r\n      ? getSelected().join(\", \")\r\n      : getSelected()[0];\r\n  }, [getSelected]);\r\n\r\n  return (\r\n    <Popover.Container\r\n      {...props}\r\n      ref={ref}\r\n      open={isOpen}\r\n      onOpenChange={(value) => {\r\n        if (!isLoading) setIsOpen(value);\r\n      }}\r\n      triggerContentGap={6}\r\n    >\r\n      {!isLoading ? (\r\n        <Popover.Trigger\r\n          className={cn(\r\n            \"border truncate border-slate-300 rounded-sm px-3 py-2 cursor-pointer flex justify-between hover:bg-slate-50 transition\",\r\n            errorMessage && \"border-red-400\"\r\n          )}\r\n        >\r\n          <p className={cn(errorMessage && \"text-red-400\")}>\r\n            {getSelectedValue() || placeholder}\r\n          </p>\r\n          <svg\r\n            className={cn(\"transition\", isOpen && \"rotate-180\")}\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            width=\"24\"\r\n            height=\"24\"\r\n            viewBox=\"0 0 24 24\"\r\n          >\r\n            <path d=\"M16.293 9.293 12 13.586 7.707 9.293l-1.414 1.414L12 16.414l5.707-5.707z\"></path>\r\n          </svg>\r\n        </Popover.Trigger>\r\n      ) : (\r\n        <Skeleton height={\"2.5rem\"} containerClassName=\"block leading-0\" />\r\n      )}\r\n      {errorMessage && (\r\n        <div className=\"flex items-center gap-2 mt-1\">\r\n          <svg\r\n            className=\"text-red-400 fill-red-400\"\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            width=\"20\"\r\n            height=\"20\"\r\n            viewBox=\"0 0 24 24\"\r\n          >\r\n            <path d=\"M11.953 2C6.465 2 2 6.486 2 12s4.486 10 10 10 10-4.486 10-10S17.493 2 11.953 2zM12 20c-4.411 0-8-3.589-8-8s3.567-8 7.953-8C16.391 4 20 7.589 20 12s-3.589 8-8 8z\"></path>\r\n            <path d=\"M11 7h2v7h-2zm0 8h2v2h-2z\"></path>\r\n          </svg>\r\n          <p className=\"text-red-400\">{errorMessage}</p>\r\n        </div>\r\n      )}\r\n      <Popover.Content className=\"p-1 border border-slate-300 shadow-xl shadow-slate-100 rounded-sm grid gap-1 bg-white\">\r\n        {options.map((item, i) => {\r\n          const isSelected = getSelected().includes(item);\r\n          return (\r\n            <div\r\n              key={i}\r\n              className={cn(\r\n                \"rounded-sm py-2 px-2 transition hover:bg-slate-50 cursor-pointer text-slate-500\",\r\n                isSelected && \"bg-slate-100 text-bg-slate-500\"\r\n              )}\r\n              onClick={handleSelect(item)}\r\n            >\r\n              {item}\r\n            </div>\r\n          );\r\n        })}\r\n      </Popover.Content>\r\n    </Popover.Container>\r\n  );\r\n}\r\n\r\nexport default forwardRef(Dropdown);\r\n`;\n\nexport default Dropdown","const Input = String.raw`\r\nimport { InputHTMLAttributes, Ref, forwardRef } from \"react\";\r\nimport Skeleton from \"react-loading-skeleton\";\r\nimport { cn } from \"@/utils/lib\";\r\n\r\ntype Props = {\r\n  /**\r\n   * Displays a label indicator above the component\r\n   */\r\n  label?: string;\r\n\r\n  /**\r\n   * Content when value is undefined\r\n   */\r\n  placeholder: string;\r\n\r\n  /**\r\n   * \\`className\\` for the child input element\r\n   */\r\n  inputClassName?: string;\r\n\r\n  /**\r\n   * Displays a loading skeleton in place of the component\r\n   */\r\n  isLoading?: boolean;\r\n\r\n  /**\r\n   * Display an nicely formatted error message\r\n   */\r\n  errorMessage?: string;\r\n};\r\n\r\nfunction Input(\r\n  {\r\n    label,\r\n    isLoading,\r\n    placeholder,\r\n    errorMessage,\r\n    inputClassName,\r\n    onBlur,\r\n    ...props\r\n  }: Props & InputHTMLAttributes<HTMLInputElement>,\r\n  ref: Ref<HTMLInputElement>\r\n) {\r\n  return (\r\n    <div className={props.className}>\r\n      <div className=\"flex justify-between\">\r\n        {label && <label className=\"pb-2 text-slate-900\">{label}</label>}\r\n      </div>\r\n      {!isLoading ? (\r\n        <input\r\n          {...props}\r\n          ref={ref}\r\n          onBlur={onBlur}\r\n          className={cn(\r\n            \"border border-slate-300 rounded-sm w-full px-3 py-2 disabled:text-slate-500 outline-none focus:border-accent transition placeholder:text-slate-400 disabled:cursor-not-allowed\",\r\n            errorMessage && \"border-red-400 \",\r\n            inputClassName\r\n          )}\r\n          placeholder={placeholder}\r\n        />\r\n      ) : (\r\n        <Skeleton\r\n          containerClassName=\"block leading-0\"\r\n          height={\"2.5rem\"}\r\n          className=\"mt-0 block\"\r\n        />\r\n      )}\r\n      {errorMessage && (\r\n        <div className=\"flex items-center gap-2 mt-1\">\r\n          <svg\r\n            className=\"text-red-400 fill-red-400\"\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            width=\"20\"\r\n            height=\"20\"\r\n            viewBox=\"0 0 24 24\"\r\n          >\r\n            <path d=\"M11.953 2C6.465 2 2 6.486 2 12s4.486 10 10 10 10-4.486 10-10S17.493 2 11.953 2zM12 20c-4.411 0-8-3.589-8-8s3.567-8 7.953-8C16.391 4 20 7.589 20 12s-3.589 8-8 8z\"></path>\r\n            <path d=\"M11 7h2v7h-2zm0 8h2v2h-2z\"></path>\r\n          </svg>\r\n          <p className=\"text-red-400\">{errorMessage}</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default forwardRef(Input);\r\n`;\n\nexport default Input","const LoadingSpinner = String.raw`\r\nimport { cn } from \"@/utils/lib\";\r\n\r\ntype Props = { className?: string };\r\n\r\nexport function LoadingSpinner({ className }: Props) {\r\n  return (\r\n    <svg\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      width=\"14\"\r\n      height=\"14\"\r\n      viewBox=\"0 0 24 24\"\r\n      fill=\"none\"\r\n      stroke=\"currentColor\"\r\n      strokeWidth=\"3.5\"\r\n      strokeLinecap=\"round\"\r\n      strokeLinejoin=\"round\"\r\n      className={cn(\"animate-spin\", className)}\r\n    >\r\n      <path d=\"M21 12a9 9 0 1 1-6.219-8.56\" />\r\n    </svg>\r\n  );\r\n}\r\n`;\n\nexport default LoadingSpinner","const Popover = String.raw`\r\nimport {\r\n  createContext,\r\n  forwardRef,\r\n  HTMLAttributes,\r\n  MutableRefObject,\r\n  PropsWithChildren,\r\n  Ref,\r\n  useCallback,\r\n  useContext,\r\n  useEffect,\r\n  useRef,\r\n  useState,\r\n} from \"react\";\r\nimport { cn } from \"@/utils/lib\";\r\n\r\ntype Props = {\r\n  /**\r\n   * Sends data about the open/close state of the component\r\n   */\r\n  onOpenChange?: (value: boolean) => void;\r\n\r\n  /**\r\n   * Allows parent component to control the open/close state of the component\r\n   */\r\n  open?: boolean;\r\n\r\n  /**\r\n   * Sets the gap between the trigger and content component\r\n   */\r\n  triggerContentGap?: number;\r\n};\r\n\r\ntype PopoverContextValues = {\r\n  isOpen: boolean;\r\n  handleChangeOpen: () => void;\r\n  triggerHeightPx: number;\r\n  setTriggerHeightPx: React.Dispatch<React.SetStateAction<number>>;\r\n  triggerContentGap: number;\r\n};\r\n\r\nconst PopoverContext = createContext<PopoverContextValues | null>(null);\r\n\r\n/**\r\n * \r\n * @example \r\n* <Popover.Container>\r\n    <Popover.Trigger>Select Item</Popover.Trigger>\r\n    <Popover.Content>\r\n      <p>Content 1</p>\r\n      <p>Content 2</p>\r\n      <p>Content 3</p>\r\n      <p>Content 4</p>\r\n      <p>Content 5</p>\r\n    </Popover.Content>\r\n</Popover.Container>\r\n */\r\nfunction Container(\r\n  {\r\n    onOpenChange,\r\n    open,\r\n    triggerContentGap = 0,\r\n    children,\r\n    ...props\r\n  }: PropsWithChildren<Props> & HTMLAttributes<HTMLDivElement>,\r\n  ref: Ref<HTMLDivElement>\r\n) {\r\n  /**\r\n   * Stores the trigger element height, used to automatically calculate the  distance between content and trigger.\r\n   */\r\n  const [triggerHeightPx, setTriggerHeightPx] = useState(0);\r\n\r\n  /**\r\n   * Stores the container / top-level element\r\n   */\r\n  const dropdownRef = useRef<HTMLDivElement | null>(null);\r\n\r\n  /**\r\n   * Keeps track of the open state of the element\r\n   */\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  /**\r\n   * Handling dropdown opening / closing\r\n   */\r\n  const handleChangeOpen = useCallback(() => {\r\n    setIsOpen((current) => !current);\r\n\r\n    // Sends the is open state to the callback\r\n    if (onOpenChange) onOpenChange(!isOpen);\r\n  }, [isOpen, onOpenChange]);\r\n\r\n  /**\r\n   * Handles closing when the user clicks outside the dropdown element.\r\n   */\r\n  useEffect(() => {\r\n    if (!dropdownRef.current) return;\r\n    // Closes the dropdown element when the user clicks outiside the component\r\n    const handleClickOutside = (e: MouseEvent) => {\r\n      if (isOpen && !dropdownRef.current?.contains(e.target as HTMLElement)) {\r\n        setIsOpen((current) => !current);\r\n        if (onOpenChange) onOpenChange(!isOpen);\r\n      }\r\n    };\r\n\r\n    window.addEventListener(\"click\", handleClickOutside);\r\n    return () => {\r\n      window.removeEventListener(\"click\", handleClickOutside);\r\n    };\r\n  }, [isOpen, onOpenChange]);\r\n\r\n  return (\r\n    <PopoverContext.Provider\r\n      // Uses the \\`open\\` prop when it is passed in. This will cause the component to ignore the \\`isOpen\\` state\r\n      value={{\r\n        isOpen: typeof open === \"undefined\" ? isOpen : open,\r\n        handleChangeOpen,\r\n        triggerHeightPx,\r\n        setTriggerHeightPx,\r\n        triggerContentGap,\r\n      }}\r\n    >\r\n      <div\r\n        ref={(elRef) => {\r\n          // Passing internal dropdown ref used to click outside\r\n          dropdownRef.current = elRef;\r\n\r\n          // Passing forward ref\r\n          if (ref && \"current\" in ref && elRef) {\r\n            (ref as MutableRefObject<HTMLDivElement>).current = elRef;\r\n          }\r\n        }}\r\n        {...props}\r\n        className={cn(\"relative\", props.className)}\r\n      >\r\n        {children}\r\n      </div>\r\n    </PopoverContext.Provider>\r\n  );\r\n}\r\n\r\nfunction Trigger(\r\n  props: PropsWithChildren<HTMLAttributes<HTMLButtonElement>>,\r\n  ref: Ref<HTMLButtonElement>\r\n) {\r\n  const context = useContext(PopoverContext);\r\n  if (!context) return;\r\n\r\n  return (\r\n    <button\r\n      {...props}\r\n      ref={(elRef) => {\r\n        // Get the trigger's height and send the to the provider component\r\n        context.setTriggerHeightPx(elRef?.getBoundingClientRect().height || 0);\r\n\r\n        // Passing forward ref\r\n        if (ref && \"current\" in ref && elRef) {\r\n          (ref as MutableRefObject<HTMLButtonElement>).current = elRef;\r\n        }\r\n      }}\r\n      className={cn(\"cursor-pointer w-full text-start\", props.className)}\r\n      onClick={(e) => {\r\n        // Preserve onClick events sent by parent component\r\n        if (props.onClick) props.onClick(e);\r\n\r\n        context.handleChangeOpen();\r\n      }}\r\n    >\r\n      {props.children}\r\n    </button>\r\n  );\r\n}\r\n\r\nfunction Content(\r\n  props: PropsWithChildren<HTMLAttributes<HTMLDivElement>>,\r\n  ref: Ref<HTMLDivElement>\r\n) {\r\n  const context = useContext(PopoverContext);\r\n  if (!context) return;\r\n\r\n  return (\r\n    <div\r\n      {...props}\r\n      ref={ref}\r\n      className={cn(\r\n        \"opacity-0 invisible scale-95 transition-[visibility,opacity,scale] duration-200 cursor-pointer z-20 absolute left-0 right-0\",\r\n        context.isOpen && \"opacity-100 scale-100 visible \",\r\n        props.className\r\n      )}\r\n      style={{\r\n        top: \\`\\${context.triggerHeightPx + context.triggerContentGap}px\\`,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default {\r\n  Container: forwardRef(Container),\r\n  Trigger: forwardRef(Trigger),\r\n  Content: forwardRef(Content),\r\n};\r\n`;\n\nexport default Popover","const Table = String.raw`\r\nimport { forwardRef, HTMLAttributes, PropsWithChildren, Ref } from \"react\";\r\nimport { cn } from \"@/utils/lib\";\r\n\r\n/**\r\n * @example\r\n * <Table.Container className=\"min-w-[50rem] rounded-md overflow-hidden\">\r\n    <Table.Head sticky>\r\n      <Table.Row className=\"bg-white\">\r\n        <Table.Cell>Invoice</Table.Cell>\r\n        <Table.Cell>Payment Status</Table.Cell>\r\n        <Table.Cell>Total Amount</Table.Cell>\r\n        <Table.Cell>Payment Method</Table.Cell>\r\n      </Table.Row>\r\n    </Table.Head>\r\n    <Table.Body>\r\n      {invoices.map((data, i) => {\r\n        return (\r\n          <Table.Row className=\"bg-white\" key={i}>\r\n            <Table.Cell>{data.invoice}</Table.Cell>\r\n            <Table.Cell>{data.paymentStatus}</Table.Cell>\r\n            <Table.Cell>{data.totalAmount}</Table.Cell>\r\n            <Table.Cell>{data.paymentMethod}</Table.Cell>\r\n          </Table.Row>\r\n        );\r\n      })}\r\n    </Table.Body>\r\n  </Table.Container>\r\n * @returns \r\n */\r\nfunction Container(\r\n  { children, ...props }: PropsWithChildren & HTMLAttributes<HTMLTableElement>,\r\n  ref: Ref<HTMLTableElement>\r\n) {\r\n  return (\r\n    <table {...props} ref={ref} className={cn(\"w-full\", props.className)}>\r\n      {children}\r\n    </table>\r\n  );\r\n}\r\n\r\nfunction Head(\r\n  {\r\n    children,\r\n    ...props\r\n  }: PropsWithChildren<{ sticky?: boolean }> &\r\n    HTMLAttributes<HTMLTableSectionElement>,\r\n  ref: Ref<HTMLTableSectionElement>\r\n) {\r\n  return (\r\n    <thead\r\n      {...props}\r\n      ref={ref}\r\n      className={cn(\r\n        props.sticky && \"sticky top-0 right-0 left-0\",\r\n        props.className\r\n      )}\r\n    >\r\n      {children}\r\n    </thead>\r\n  );\r\n}\r\n\r\nfunction Body(\r\n  {\r\n    children,\r\n    ...props\r\n  }: PropsWithChildren & HTMLAttributes<HTMLTableSectionElement>,\r\n  ref: Ref<HTMLTableSectionElement>\r\n) {\r\n  return (\r\n    <tbody {...props} ref={ref}>\r\n      {children}\r\n    </tbody>\r\n  );\r\n}\r\n\r\nfunction Row(\r\n  {\r\n    children,\r\n    ...props\r\n  }: PropsWithChildren<{ padding?: { x?: number; y?: number } }> &\r\n    HTMLAttributes<HTMLTableRowElement>,\r\n  ref: Ref<HTMLTableRowElement>\r\n) {\r\n  return (\r\n    <tr {...props} ref={ref}>\r\n      {children}\r\n    </tr>\r\n  );\r\n}\r\n\r\nfunction Cell(\r\n  {\r\n    children,\r\n    ...props\r\n  }: PropsWithChildren & HTMLAttributes<HTMLTableCellElement>,\r\n  ref: Ref<HTMLTableCellElement>\r\n) {\r\n  return (\r\n    <td className=\"px-4 py-2 text-start\" ref={ref} {...props}>\r\n      {children}\r\n    </td>\r\n  );\r\n}\r\n\r\nexport default {\r\n  Container: forwardRef(Container),\r\n  Body: forwardRef(Body),\r\n  Head: forwardRef(Head),\r\n  Row: forwardRef(Row),\r\n  Cell: forwardRef(Cell),\r\n};\r\n`;\n\nexport default Table","const Toast = String.raw`\r\nimport {\r\n  ReactNode,\r\n  createContext,\r\n  useContext,\r\n  useEffect,\r\n  useMemo,\r\n  useState,\r\n} from \"react\";\r\nimport { cn } from \"@/utils/lib\";\r\nimport { createPortal } from \"react-dom\";\r\n\r\ntype ToastContextValues = {\r\n  success: (message: string) => void;\r\n  error: (message: string) => void;\r\n};\r\n\r\nconst ToastContext = createContext<ToastContextValues | null>(null);\r\n\r\ntype ToastState = {\r\n  message: string;\r\n  // Used to differentiate calls from \\`toast()\\`. Without this, a call from \\`toast()\\` with the same message won't trigger the timeout effect.\r\n  id: number;\r\n  show: boolean;\r\n  type: \"success\" | \"error\";\r\n};\r\n\r\n/*\r\n * ToastProvider is a context provider that provides a function to display a Toast message.\r\n * The Toast message is displayed at the bottom of the screen and disappears after a specified amount of time.\r\n * The message can be displayed using the \\`toast.success(msg)\\` or \\`toast.error(msg)\\` function.\r\n *\r\n * Self implementation of the popular library \\`react-toastify\\` to display Toast messages.\r\n */\r\nexport default function ToastProvider({\r\n  children,\r\n  suspendDuration = 2000,\r\n}: {\r\n  children: ReactNode;\r\n  suspendDuration?: number;\r\n}) {\r\n  const [state, setState] = useState<ToastState>({\r\n    id: 0,\r\n    message: \"Default message\",\r\n    show: false,\r\n    type: \"success\",\r\n  });\r\n\r\n  // Suspends / display the Toast for a specified amount of time.\r\n  useEffect(() => {\r\n    const suspend = setTimeout(() => {\r\n      setState((cur) => ({ ...cur, show: false }));\r\n    }, suspendDuration);\r\n\r\n    return () => {\r\n      clearTimeout(suspend);\r\n    };\r\n  }, [suspendDuration, state.message, state.id]);\r\n\r\n  /**\r\n   * Displays the Toast window with the message inside.\r\n   */\r\n  const toast = useMemo(() => {\r\n    return {\r\n      success: (message: string) =>\r\n        setState({ id: Math.random(), message, show: true, type: \"success\" }),\r\n      error: (message: string) =>\r\n        setState({ id: Math.random(), message, show: true, type: \"error\" }),\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <ToastContext.Provider value={toast}>\r\n      {createPortal(\r\n        <div\r\n          className={cn(\r\n            \"fixed bottom-4 right-6 z-[100] translate-y-[-2rem] text-slate-900 bg-bg text-start flex justify-between items-center pl-5 pr-4 py-2 rounded-md shadow-lg shadow-main/30 transition-all duration-500 w-fit border-slate-300 border whitespace-nowrap gap-4 bg-white\",\r\n            state.type === \"error\" && \"bg-red-500 border-red-400 text-white\"\r\n          )}\r\n          style={{\r\n            translate: state.show ? \"0 0\" : \"0 300%\",\r\n          }}\r\n        >\r\n          {state.message}\r\n        </div>,\r\n        document.body\r\n      )}\r\n\r\n      {children}\r\n    </ToastContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useToast() {\r\n  const context = useContext(ToastContext);\r\n  if (!context)\r\n    throw new Error(\"useToast can't be used outside of its provider's scope\");\r\n  return context;\r\n}\r\n`;\n\nexport default Toast","import { RequestHandler } from \"express\";\nimport { AppError } from \"../utils/http/AppError\";\nimport { STATUS } from \"../utils/http/statusCodes\";\nimport { kebabToPascalCase } from \"../utils/utils\";\nimport { dependencyList } from \"../components/dependencyList\";\nimport * as componentFiles from \"../components\";\n\ntype ComponentsData = {\n  name: string;\n  componentDependencies: string[];\n  dependencies: string[];\n  devDependencies: string[];\n  content: string;\n};\n\nconst getComponent: RequestHandler = async (request, response, next) => {\n  try {\n    const components = request.query.components as string | undefined;\n    if (!components) {\n      throw new AppError(\"No components was provided\", STATUS.BAD_REQUEST);\n    }\n\n    // Converts the component string into pascal cased component name array\n    const componentsList = components.split(\",\").map((name) => {\n      return kebabToPascalCase(name);\n    });\n\n    // Conver the components data into an easier to use map format\n    const dependencyDataList: ComponentsData[] = JSON.parse(dependencyList);\n    const dependencyMap: Record<string, ComponentsData> = {};\n    dependencyDataList.forEach((component) => {\n      dependencyMap[component.name] = component;\n    });\n\n    // Resolve the component dependecy list using the bfs method\n    const dependenciesToBeInstalled = new Set<string>();\n    const devDependenciesToBeInstalled = new Set<string>();\n    const toBeInstalled: string[] = [];\n    const queue = componentsList;\n\n    while (queue.length > 0) {\n      const name = queue.shift();\n      if (!name) continue;\n\n      const component = dependencyMap[name];\n      if (!component) {\n        throw new AppError(`Component ${name} not found`, STATUS.NOT_FOUND);\n      }\n\n      if (!toBeInstalled.includes(name)) {\n        component.componentDependencies.forEach((dependencyName) => {\n          queue.push(kebabToPascalCase(dependencyName));\n        });\n\n        component.dependencies.forEach((name) =>\n          dependenciesToBeInstalled.add(name)\n        );\n\n        component.devDependencies.forEach((name) =>\n          devDependenciesToBeInstalled.add(name)\n        );\n\n        toBeInstalled.push(name);\n      }\n    }\n\n    response.send({\n      components: toBeInstalled.map((name) => {\n        return {\n          name,\n          content: (componentFiles as Record<string, string>)[name]\n            .replace(/\\\\`/g, \"`\")\n            .replace(/\\\\\\$\\{/g, \"${\")\n            .replace(/^\\n+/, \"\"),\n        };\n      }),\n      dependencies: Array.from(dependenciesToBeInstalled),\n      devDependencies: Array.from(devDependenciesToBeInstalled),\n    });\n  } catch (error) {\n    next(error);\n  }\n};\n\nconst getComponentNames: RequestHandler = async (request, response, next) => {\n  try {\n    const dependencyDataList: ComponentsData[] = JSON.parse(dependencyList);\n    const allComponentNames = dependencyDataList.map((dep) => dep.name);\n\n    response.send({\n      data: allComponentNames,\n    });\n  } catch (error) {\n    next(error);\n  }\n};\n\nexport default { getComponent, getComponentNames };\n","import componentRouter from \"./componentRouter\";\r\nimport { Router } from \"express\";\r\n\r\nconst router = Router();\r\n\r\n/**\r\n * Insert your router here\r\n * @example router.use(\"/example\", exampleRouter)\r\n */\r\n\r\nrouter.use(\"/\", componentRouter);\r\n\r\nexport default router;\r\n","export const PORT = process.env.PORT || \"\";\r\n"],"mappings":"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","names":["chalk","express","cors","Router","AppError","_AppError","message","statusCode","IS_PRODUCTION","errorHandler","error","_","response","__","AppError","ErrorController_default","STATUS","kebabToPascalCase","input","word","dependencyList","components_exports","__export","Button_default","DashboardLayout_default","Dialog_default","Dropdown_default","Input_default","LoadingSpinner_default","Popover_default","Table_default","Toast_default","Button","Button_default","DashboardLayout","DashboardLayout_default","Dialog","Dialog_default","Dropdown","Dropdown_default","Input","Input_default","LoadingSpinner","LoadingSpinner_default","Popover","Popover_default","Table","Table_default","Toast","Toast_default","getComponent","request","response","next","components","AppError","STATUS","componentsList","name","kebabToPascalCase","dependencyDataList","dependencyList","dependencyMap","component","dependenciesToBeInstalled","devDependenciesToBeInstalled","toBeInstalled","queue","dependencyName","components_exports","error","getComponentNames","allComponentNames","dep","ComponentController_default","componentRouter","Router","ComponentController_default","componentRouter_default","Router","router","componentRouter_default","routes_default","app","express","cors","routes_default","_","__","next","AppError","STATUS","ErrorController_default","app_default","PORT","app_default","PORT","chalk"]}